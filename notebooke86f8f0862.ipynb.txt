{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"\n\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom sklearn.datasets import make_regression\nfrom sklearn.preprocessing import OneHotEncoder\nimport sklearn.compose\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom collections import Counter\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndef cumulatively_categorise(column,threshold,return_categories_list=True):\n  #Find the threshold value using the percentage and number of instances in the column\n  threshold_value=int(threshold*len(column))\n  #Initialise an empty list for our new minimised categories\n  categories_list=[]\n  #Initialise a variable to calculate the sum of frequencies\n  s=0\n  #Create a counter dictionary of the form unique_value: frequency\n  counts=Counter(column)\n\n  #Loop through the category name and its corresponding frequency after sorting the categories by descending order of frequency\n  for i,j in counts.most_common():\n    #Add the frequency to the global sum\n    s+=dict(counts)[i]\n    #Append the category name to the list\n    categories_list.append(i)\n    #Check if the global sum has reached the threshold value, if so break the loop\n    if s>=threshold_value:\n      break\n  #Append the category Other to the list\n  categories_list.append('Other')\n\n  #Replace all instances not in our new categories by Other  \n  new_column=column.apply(lambda x: x if x in categories_list else 'Other')\n\n  #Return transformed column and unique values if return_categories=True\n  if(return_categories_list):\n    return new_column,categories_list\n  #Return only the transformed column if return_categories=False\n  else:\n    return new_column\n\n\n\n\ndata_train = pd.read_csv('../input/ml-etsisi-precio-portatil/train.csv')\nx_test =pd.read_csv('../input/ml-etsisi-precio-portatil/test.csv')\n\ndata_train['Weight'] = data_train['Weight'].str.replace(r'kg', '').astype(float)\nx_test['Weight'] = x_test['Weight'].str.replace(r'kg', '').astype(float)\n                                            \ncolumn_transformer = sklearn.compose.ColumnTransformer(transformers=[\n    (\"ordinal\",sklearn.preprocessing.OrdinalEncoder(), [1]),\n    (\"standard-scaler\",sklearn.preprocessing.StandardScaler(), [4,11]),\n    (\"one-hot\",sklearn.preprocessing.OneHotEncoder(handle_unknown = 'ignore'),[3,5,6,7,8,9,10]),\n    (\"drop\",\"drop\",[0,2])\n\n])\n\n\nx_train = data_train.loc[:,['LaptopId','Company','Product','TypeName','Inches','ScreenResolution','Cpu','Ram','Memory','Gpu','OpSys','Weight']]\ny=data_train.loc[:,'Price']\n\n#Product_unique_transform,new_Product_list=cumulatively_categorise(x['Product'],return_categories_list=True)\nScreenResolution_unique_transform1,new_ScreenResolution_list=cumulatively_categorise(x_train['ScreenResolution'],0.98,return_categories_list=True)\nCpu_unique_transform1,new_Cpu_list=cumulatively_categorise(x_train['Cpu'],0.95,return_categories_list=True)\nMemory_unique_transform1,new_Memory_list=cumulatively_categorise(x_train['Memory'],0.8,return_categories_list=True)\nCompany_unique_transform1,new_Company_list=cumulatively_categorise(x_train['Company'],0.85,return_categories_list=True)\nGpu_unique_transform1,new_Gpu_list=cumulatively_categorise(x_train['Gpu'],0.80,return_categories_list=True)\n\nx_train['ScreenResolution']=ScreenResolution_unique_transform1\nx_train['Cpu']=Cpu_unique_transform1\nx_train['Mamory']=Memory_unique_transform1\nx_train['Company']=Company_unique_transform1\nx_train['Gpu']=Gpu_unique_transform1\n\nScreenResolution_unique_transform2,new_ScreenResolution_list=cumulatively_categorise(x_test['ScreenResolution'],0.90,return_categories_list=True)\nCpu_unique_transform2,new_Cpu_list=cumulatively_categorise(x_test['Cpu'],0.90,return_categories_list=True)\nMemory_unique_transform2,new_Memory_list=cumulatively_categorise(x_test['Memory'],0.97,return_categories_list=True)\nCompany_unique_transform2,new_Company_list=cumulatively_categorise(x_test['Company'],0.85,return_categories_list=True)\nGpu_unique_transform2,new_Gpu_list=cumulatively_categorise(x_test['Gpu'],0.90,return_categories_list=True)\n#x['Product']=Product_unique_transform\nx_test['ScreenResolution']=ScreenResolution_unique_transform2\nx_test['Cpu']=Cpu_unique_transform2\nx_test['Mamory']=Memory_unique_transform2\nx_test['Company']=Company_unique_transform2\nx_test['Gpu']=Gpu_unique_transform2\n\n\n\n\nx_train_trans= column_transformer.fit_transform(x_train)\nx_test_trans= column_transformer.transform(x_test)\n\n\nid_test=x_test.loc[:,'LaptopId']\n\n\nrf = RandomForestRegressor(n_estimators = 115, max_features = 'sqrt', max_depth = 100, random_state = 18) \n#regr_1 = DecisionTreeRegressor(max_depth=30)\n#knn = KNeighborsClassifier(n_neighbors=50)\n#knn.fit(x_train_trans, y_train)\nrf.fit(x_train_trans,y)\n\npredictions = rf.predict(x_test_trans)\n\nid_test_df=pd.DataFrame(id_test)\npredictions_df=pd.DataFrame(predictions)\n\nsubmission = pd.concat([id_test_df, predictions_df], axis=1)\nmapping = {submission.columns[0]:'LaptopId', submission.columns[1]: 'Price'}\nsub=submission.rename(columns=mapping)\nsub.to_csv('submission.csv', sep = ',',index=False)\nsub.reset_index(drop=True)\nsub\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-10-15T12:34:37.950886Z","iopub.execute_input":"2022-10-15T12:34:37.951373Z","iopub.status.idle":"2022-10-15T12:34:40.097714Z","shell.execute_reply.started":"2022-10-15T12:34:37.951278Z","shell.execute_reply":"2022-10-15T12:34:40.096532Z"},"trusted":true},"execution_count":1,"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"     LaptopId        Price\n0         891  1953.867594\n1        1149  1416.605913\n2         962   844.073652\n3        1204  1206.726580\n4        1139  1321.933739\n..        ...          ...\n386       268   877.176174\n387      1278   439.808551\n388       299  1909.856870\n389       162   821.905229\n390       169   699.173043\n\n[391 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LaptopId</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>891</td>\n      <td>1953.867594</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1149</td>\n      <td>1416.605913</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>962</td>\n      <td>844.073652</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1204</td>\n      <td>1206.726580</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1139</td>\n      <td>1321.933739</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>386</th>\n      <td>268</td>\n      <td>877.176174</td>\n    </tr>\n    <tr>\n      <th>387</th>\n      <td>1278</td>\n      <td>439.808551</td>\n    </tr>\n    <tr>\n      <th>388</th>\n      <td>299</td>\n      <td>1909.856870</td>\n    </tr>\n    <tr>\n      <th>389</th>\n      <td>162</td>\n      <td>821.905229</td>\n    </tr>\n    <tr>\n      <th>390</th>\n      <td>169</td>\n      <td>699.173043</td>\n    </tr>\n  </tbody>\n</table>\n<p>391 rows Ã— 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nsubmission","metadata":{"execution":{"iopub.status.busy":"2022-10-13T20:37:49.569387Z","iopub.execute_input":"2022-10-13T20:37:49.570203Z","iopub.status.idle":"2022-10-13T20:37:49.586938Z","shell.execute_reply.started":"2022-10-13T20:37:49.570149Z","shell.execute_reply":"2022-10-13T20:37:49.584973Z"},"trusted":true},"execution_count":null,"outputs":[]}]}